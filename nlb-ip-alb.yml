AWSTemplateFormatVersion: 2010-09-09
Description: ECS NLB
Parameters:
  LDAPSCertificateARN:
    Description: ARN of SSL Certificate
    AllowedPattern: "arn:aws:acm:.*"
    Type: String
    Default: "arn:aws:acm:us-east-1:257849252708:certificate/d40f0cbc-48bc-41aa-8dbb-97b40f7e0d0d"
    
  # VPCId:
  #   Description: Please provide a VPC to deploy the solution into.
  #   Type: 'AWS::SSM::Parameter::Value<AWS::EC2::VPC::Id>'
  #   Default: '/saas-platform/EGRESS_PUBLIC_VPC'
  # SubnetId1:
  #   Description: Please provide the first Simple AD private subnet id with outbound connectivity within the VPC you selected above.
  #   Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Subnet::Id>'
  #   Default: '/saas-platform/EGRESS_PUBLIC_SUBNET1'
  # SubnetId2:
  #   Description: Please provide the second Simple AD private subnet id with outbound connectivity within the VPC you selected above.
  #   Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Subnet::Id>'
  #   Default: '/saas-platform/EGRESS_PUBLIC_SUBNET2'

  VPCId:
    Description: Please provide a VPC to deploy the solution into.
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::VPC::Id>'
    Default: '/saas-platform/EGRESS_PUBLIC_VPC_NEW'
  SubnetId1:
    Description: Please provide the first Simple AD private subnet id with outbound connectivity within the VPC you selected above.
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Subnet::Id>'
    Default: '/saas-platform/EGRESS_PUBLIC_SUBNET1_NEW'
  SubnetId2:
    Description: Please provide the second Simple AD private subnet id with outbound connectivity within the VPC you selected above.
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Subnet::Id>'
    Default: '/saas-platform/EGRESS_PUBLIC_SUBNET2_NEW'
  
  NetworkLoadBalancerName: 
    Type: String
    Default: 'test-nlb-demo'
  
  NLBVPCId:
    Type: String
    Default: 'vpc-0b4ffdb7e2ebe3957'
  NLBSubnetId1:
    Type: String
    Default: 'subnet-0a68d06b896f58f0b'
  NLBSubnetId2:
    Type: String
    Default: subnet-05c203143db9b372d


  # SimpleADPriIP:
  #   Description: IP Address of primary Simple AD instance
  #   #AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})"
  #   Type: String
  #   Default: "10.36.0.0/21"
  # SimpleADSecIP:
  #   Description: IP Address of secondary Simple AD instance
  #   #AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})"
  #   Type: String
  #   Default: "10.36.1.0/21"

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Network Configuration
      Parameters:
      - VPCId
      - SubnetId1
      - SubnetId2
      # - SimpleADPriIP
      # - SimpleADSecIP
      - LDAPSCertificateARN
    ParameterLabels:
      VPCId:
        default: Target VPC for solution
      SubnetId1:
        default: Simple AD Primary Subnet
      SubnetId2:
        default: Simple AD Secondary Subnet
      # SimpleADPriIP:
      #   default: Primary Simple AD Server IP
      # SimpleADSecIP:
      #   default: Secondary Simple AD Server IP
      LDAPSCertificateARN:
        default: ARN for SSL Certificate
Resources:
  CustomResource:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !GetAtt Function.Arn

  Function:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import os
          
          nlb_loadbalancer_name = os.environ['NLB_LOADBALANCER_NAME']
          filter_value = '*{nlb}*'.format(nlb=nlb_loadbalancer_name)
          
          client = boto3.client('ec2')
           
          CREATE = 'Create'
          UPDATE = 'Update'
          response_data = {}
          
          def lambda_handler(event, context):
            try:
              if event['RequestType'] == CREATE or event['RequestType'] == UPDATE:
                response = client.describe_network_interfaces(
                  Filters=[
                    {
                      'Name':'description',
                      'Values':[
                        filter_value
                      ]
                    }
                  ]
                )
                private_addresses = [interface['PrivateIpAddress'] for interface in response['NetworkInterfaces']]
                response_data['PrivateAddresses'] = private_addresses
              
              cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
              
            except Exception as e:
              print(e)
              cfnresponse.send(event, context, cfnresponse.FAILED, response_data)
      Environment:
        Variables:
          NLB_LOADBALANCER_NAME: !GetAtt NetworkLoadBalancer.LoadBalancerName
      FunctionName: "alb-nlb-function"
      Handler: 'index.lambda_handler'
      Runtime: 'python3.9'
      Role: !GetAtt FunctionRole.Arn

  
  FunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: "nlb-DescribeNetworkInterfaces"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeNetworkInterfaces
                Resource: "*"

  NetworkLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref NetworkLoadBalancerName
      LoadBalancerAttributes:
       - Key: 'load_balancing.cross_zone.enabled'
         Value: true
      Scheme: internal
      Subnets:
        - !Ref NLBSubnetId1
        - !Ref NLBSubnetId2
      Type: network
  NetworkLoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: nlb-test-tg
      Port: 80
      Protocol: TCP
      VpcId: !Ref NLBVPCId
      HealthCheckPath: /ingestion
      HealthCheckEnabled: True
      HealthCheckIntervalSeconds: 10
      HealthCheckPort: 'traffic-port'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60
        - Key: 'preserve_client_ip.enabled'
          Value: false
      # Targets:
      #   - Id: !Ref SimpleADPriIP
      #     Port: 389
      #   - Id: !Ref SimpleADSecIP
      #     Port: 389
      TargetType: ip
      
  # NetworkLoadBalancerListenerHttps:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   Properties:
  #     DefaultActions:
  #       - Type: forward
  #         TargetGroupArn: !Ref NetworkLoadBalancerTargetGroup
  #     LoadBalancerArn: !Ref NetworkLoadBalancer
  #     Port: '443'
  #     Protocol: TLS
  #     SslPolicy: ELBSecurityPolicy-TLS-1-2-2017-01
  #     Certificates:
  #       - CertificateArn: !Ref LDAPSCertificateARN
  NetworkLoadBalancerListenerHttp:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref NetworkLoadBalancerTargetGroup
      LoadBalancerArn: !Ref NetworkLoadBalancer
      Port: '80'
      Protocol: TCP
  
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName:  'alb-test-tg'
      GroupDescription: HTTP/S access to the load balancer
      #VpcId: !GetAtt network.VPC
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
      # Tags:
      #   - Key: Tenant
      #     Value: !Ref TenantId

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    #DependsOn: network
    Properties:
      Name:  'alb-test'
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '30'
        # - Key: access_logs.s3.enabled
        #   Value: 'true'
        # - Key: access_logs.s3.bucket
        #   Value:
        #     Fn::Join: ['', ['{{resolve:ssm:/saas-platform/', !Ref Environment, '/ACCESS_LOGS_BUCKET}}']]
        # - Key: access_logs.s3.prefix
        #   Value: 'access-logs'
      Subnets:
        - !Ref SubnetId1
        - !Ref SubnetId2
        #- !GetAtt network.SubnetPublicA
        #- !GetAtt network.SubnetPublicB
      SecurityGroups: [!Ref ALBSecurityGroup]
      # Tags:
      #   - Key: Tenant
      #     Value: !Ref TenantId
      #   - Key: Tier
      #     Value: !Ref Tier
  
  DefaultALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    #Condition: IsPublic
    Properties:
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 15
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      Matcher: 
        HttpCode: '200-499'
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VPCId
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: 'true'
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: '86400'
        - Key: deregistration_delay.timeout_seconds
          Value: '30'
      Targets:
        - Id: !Select [0, !GetAtt CustomResource.PrivateAddresses]
          Port: 80
          AvailabilityZone: all
        - Id: !Select [1, !GetAtt CustomResource.PrivateAddresses]
          Port: 80
          AvailabilityZone: all


  HttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    #Condition: NoCertificate
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DefaultALBTargetGroup
  #comment these lines by myself
  HttpsListener:
     #Condition: HasCertificate
     Type: AWS::ElasticLoadBalancingV2::Listener
     Properties:
       LoadBalancerArn: !Ref ApplicationLoadBalancer
       Port: 443
       Protocol: HTTPS
       DefaultActions:
         - Type: forward
           TargetGroupArn: !Ref DefaultALBTargetGroup
       Certificates:
         - CertificateArn: !Ref LDAPSCertificateARN



Outputs:
  LDAPSURL:
    Description: LDAPS Route53 Alias Target
    Value: !GetAtt NetworkLoadBalancer.DNSName
  
  # NLBPrivateAddress2:
  #    Value: !GetAtt CustomResource.PrivateAddresses

#   NLBPrivateAddress1:
#     Type: String
#     Value: !Ref CustomResource.PrivateIpAddresses
    
  NLBPrivateAddress1:
    Value: !Select [0, !GetAtt CustomResource.PrivateAddresses]
  
  NLBPrivateAddress2:
    Value: !Select [1, !GetAtt CustomResource.PrivateAddresses]